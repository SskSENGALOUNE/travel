"use client";

import { useState } from "react";

function TransferForm() {
  const [accounts, setAccounts] = useState([
    { name: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢", balance: 500000 },
    { name: "Laura", balance: 300000 },
  ]);
  const [sender, setSender] = useState("");
  const [receiver, setReceiver] = useState("");
  const [amount, setAmount] = useState<number | "">("");
  const [message, setMessage] = useState("");
  const [history, setHistory] = useState<string[]>([]);

  const handleTransfer = () => {
    if (!sender || !receiver || !amount) {
      setMessage("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö");
      return;
    }

    if (sender === receiver) {
      setMessage("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ");
      return;
    }

    const senderAccount = accounts.find((acc) => acc.name === sender);
    const receiverAccount = accounts.find((acc) => acc.name === receiver);

    if (!senderAccount || !receiverAccount) {
      setMessage("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
      return;
    }

    if (senderAccount.balance < Number(amount)) {
      setMessage("‚ùå ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠");
      return;
    }

    // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
    const updatedAccounts = accounts.map((acc) => {
      if (acc.name === sender) {
        return { ...acc, balance: acc.balance - Number(amount) };
      }
      if (acc.name === receiver) {
        return { ...acc, balance: acc.balance + Number(amount) };
      }
      return acc;
    });

    setAccounts(updatedAccounts);
    setHistory([
      `üîÅ ‡πÇ‡∏≠‡∏ô ${amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó ‡∏à‡∏≤‡∏Å ${sender} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${receiver}`,
      ...history,
    ]);
    setMessage(`‚úÖ ‡πÇ‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`);
    setAmount("");
  };

  return (
    <div className="max-w-xl mx-auto p-4 bg-white rounded shadow mt-10 space-y-4">
      <h2 className="text-2xl font-bold">üí∏ ‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á</h2>

      <div className="grid sm:grid-cols-2 gap-4">
        {/* Dropdown ‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô */}
        <select
          className="w-full border p-2 rounded"
          value={sender}
          onChange={(e) => setSender(e.target.value)}
        >
          <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô</option>
          {accounts.map((acc, i) => (
            <option key={i} value={acc.name}>
              {acc.name}
            </option>
          ))}
        </select>

        {/* Dropdown ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö */}
        <select
          className="w-full border p-2 rounded"
          value={receiver}
          onChange={(e) => setReceiver(e.target.value)}
        >
          <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö</option>
          {accounts.map((acc, i) => (
            <option key={i} value={acc.name}>
              {acc.name}
            </option>
          ))}
        </select>
      </div>

      <input
        className="w-full border p-2 rounded"
        type="number"
        placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"
        value={amount}
        onChange={(e) => setAmount(Number(e.target.value))}
      />

      <button
        onClick={handleTransfer}
        className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 w-full"
      >
        ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
      </button>

      {message && <p className="text-green-600">{message}</p>}

      <div>
        <h3 className="font-semibold">üìä ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</h3>
        <ul className="list-disc ml-5">
          {accounts.map((acc, i) => (
            <li key={i}>
              {acc.name}: {acc.balance.toLocaleString()} ‡∏ö‡∏≤‡∏ó
            </li>
          ))}
        </ul>
      </div>

      <div>
        <h3 className="font-semibold">üìù ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô</h3>
        <ul className="list-disc ml-5">
          {history.map((h, i) => (
            <li key={i}>{h}</li>
          ))}
        </ul>
      </div>
    </div>
  );
}

export default TransferForm;
